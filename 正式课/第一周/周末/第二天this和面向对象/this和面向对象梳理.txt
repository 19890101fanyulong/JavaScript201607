 this  1 事件中的this  2 "."函数执行时候的this  3 自执行函数中的this  4 构造函数中的this  5 call和apply  6 定时器和回调函数中的this
       一道某数字公司的面试题  数组的面试题==> 传的参数是地址还是值 ==> 画图 作用域释放
 面向对象:  1 单例模式  ==> this跨属性调用
           2 工厂模式  ===> 1 先创建一个对象   2 给对象添加属性  3 返回这个对象
           3 构造函数模式： 1 只有执行的时候用new才是当作类来执行  ==> 主动返回一个实例对象
                           2 return一个对象数据类型会默认破坏这种返回动作 return this
                           3 构造函数中的私有变量，不影响我的实例返回动作

           4 函数的三种角色: 1 普通函数  ==》 普通函数的执行步骤
                            2 构造函数
                            3 也是Function的实例

           5: 原型模式:  1 任何函数天生自带prototype  ==> 定义在原型的都是公有方法
                        2 任何一个对象数据类型都是Object的实例
                        3 任何一个实例都天生自带一个__proto__属性，指向所属类的原型 ==> 图解

                        4 Object是所有类的基类
                        5 原型链
                        6 批量设置共有属性和方法 ==> constructor丢失问题
                        7 定义在原型函数中的this是调用方法的实例 ==> 在数组的原型上定义的去重方法
                        8 链式写法
                        9 mySlice myforEach  myMap
                        10 hasOwnProperty
                        下周： call apply 表格排序  正则 dom  按照视频顺序
                        继承补课
