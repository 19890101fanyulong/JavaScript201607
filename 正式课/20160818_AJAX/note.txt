->当前的AJAX只有执行SEND之后,这件事情(请求数据这件事情)才算开始,此时后续的所有操作都是由HTTP和服务器端处理的:HTTP把内容传递给服务器,服务器准备数据,HTTP在把准备好的数据返回给客户端(在readyState===2的时候先返回响应头内容,readyState===4的时候响应主体内容才返回)，只有当响应主体内容返回当前AJAX这件事才算完成

->当执行SEND之后,JS中的线程就空闲下来了
  同步:即使空闲也不做其它的事情,只有当readyState===4的时候,也就是AJAX彻底完成才会做其它的事情
  异步:空闲的时候先做其它的事情,等其它的事情做完了,然后在看看AJAX有没有结束,结束了在把响应主体的内容获取到

[例子1]
var xhr = createXHR();
xhr.open("get", "URL", true);//->异步
xhr.onreadystatechange = function () {
    var state = xhr.readyState;
    if (state === 2) {
        console.log(new Date(xhr.getResponseHeader("Date")));
        return;
    }
    if (state === 4) {
        console.log(xhr.responseText);
    }
};
//->readyState:1  AJAX结束readyState:4
xhr.send(null);

while (1) {
    //->AJAX采用异步,当SEND后不等,执行死循环,JS中的线程被死循环占用了,即使AJAX完成了也不会把内容输出
}


->扫盲
  CMS:网站内容发布管理系统
  CRM:客户管理系统
  OA:企业办公系统
  ERP:企业战略管理系统

->API
  Application Programming Interface 应用程序接口
  服务器端提供给客户端用来请求数据的接口地址就是API

->真实项目的流程
  产品确定需求和产品原型
    ->UI设计是按照产品的需求和原型出PSD格式的效果图
        ->前端:切图+HTML+CSS；JS效果；通过服务器端提供好的URL地址使用AJAX等技术发送请求获取服务器端提供的数据，获取到数据后把数据在页面上进行动态的绑定；
        ->后台:在服务器上发布项目(创建服务、监听端口...)；根据需求把对应的功能实现(客户信息的增删改查等功能都实服务器端完成的),为客户端提供对应的API接口(请求的URL地址)；
            ->测试

->API接口文档
  这里面包含了客户端和服务器端交互的全部接口的详细信息，一般都是由后台开发人员确定下来的。当API文档确定下来后，后台开发人员按照接口文档实现对应的功能，前端开发人员按照文档进行调取请求等

->自己写一个API文档
  真实项目中客户端传递给服务器端的数据，或者是服务器端传递给客户端的数据一般都是JSON格式的字符串

  1、获取所有的客户信息
    URL:/getList  GET
    参数:(客户端需要传递给服务器端什么东西) 无
    返回:(服务器端返回给客户端的内容是什么样的)
       '{
          "code":0,//->0是成功 1失败,没有任何的客户信息 2失败,...
          "msg":"成功!",
          "data":[//->包含了所需要的所有的客户信息
               {
                "id":1,
                "name":"珠峰培训",
                "age":7,
                "phone":"13041086186",
                "address":"北京市昌平区回龙观东大街"
               },
               ......
          ]
       }'

  3、获取指定的客户信息
    URL:/getInfo  GET
    参数:?customId=xxx ->想获取哪一个客户的信息,就先要把这个客户的ID传给服务器端
    返回:
       '{
          "code":0,//->0成功 1失败,没有当前客户
          "msg":"当前客户不存在!",
          "data":{
            "id":1,
            "name":"xxx",
            "age":xxx,
            "phone":"xxxxxxx",
            "address":"xxxxxxxxxx"
          }
       }'

  5、删除客户信息
    URL:/removeInfo GET
    参数:?customId=xxx 想要删除谁就把对应的客户ID传递给服务器
    返回:
        '{
              "code":0,//->0成功 1失败,没有当前客户
              "msg":"当前客户不存在!"
        }'

  2、增加客户信息
    URL:/addInfo POST
    参数:'{"name":"xxx","age":xxx,"phone":"","address":""}' ->客户的ID是唯一的,服务器端在新增加数据的时候,新增数据的ID应该在当前最大ID的基础上累加1得到的
    返回:'{
             "code":0,//->0成功 1失败
             "msg":"成功!"
         }'

  4、修改原有的客户信息
    URL:/updateInfo POST
    参数:'{"id":1,""name":"xxx","age":xxx,"phone":"","address":""}'
    返回:'{
            "code":0,//->0成功 1失败
            "msg":"成功!"
        }'