客户端和服务器端的交互模型:
  客户端发送请求 ->  服务器端接收请求  -> 服务端准备数据内容  ->服务器端把内容返回给客户端  -> 客户端接收返回的内容 -> 客户端进行解析渲染

  客户端传递给服务器端的内容以及服务器端传递给客户端的内容都是由HTTP等这种传输协议完成的

->HTTP事物
  REQUEST 请求阶段
  RESPONSE 响应阶段
  两个阶段都完成这件事才算完成,也就是完成了一个HTTP事物

->URI/URL/URN
  URI:统一资源标识符 URL+URN
  URL:统一资源定位符
  URN:统一资源名称

->HTTP报文(发送给服务器的内容和返回给客户端的内容统称为报文)
  起始行
  首部:请求首部、响应首部、通用首部(请求和响应都有的)、自定义首部
  主体:请求主体、响应主体

->Request Headers(请求头:客户端设置,服务器端获取)
  GET /getList?_=0.19020438256316052 HTTP/1.1  ->请求起始行
  Host: 192.168.1.100:81  ->请求首部
  Connection: keep-alive
  Cache-Control: max-age=0
  User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2679.0 Safari/537.36
  Accept: */*
  Referer: http://192.168.1.100:81/index.html
  Accept-Encoding: gzip, deflate, sdch
  Accept-Language: zh-CN,zh;q=0.8

->Response Headers(响应头:服务器端设置,客户端获取)
  HTTP/1.1 200 OK  ->响应起始行
  content-type: application/json;charset=utf-8; ->响应首部
  Date: Wed, 17 Aug 2016 04:52:30 GMT ->服务器端返回数据的那一瞬间的服务器时间
  Connection: keep-alive
  Transfer-Encoding: chunked

->Response 响应主体,服务器端返回的内容都可以在响应主体中看到(服务器端返回给客户端的内容基本上都在响应主体中,当然根据需求也会有一部分在响应头中返回给客户端)

->Request Payload 请求主体(客户端如果想给服务器端传递内容,可以放在请求主体中传递给服务器,服务器接收到请求可以在请求主体中获取到内容)
  客户端也可以通过请求头把一些信息传递给服务器端
  客户端还有一种常用的方式可以把信息传递给服务器:通过URL请求时候问号传递参数的方式


二、AJAX

->什么是AJAX?AJAX作用是什么?
  async javascript and xml

  async:我们真实项目中一般使用AJAX从服务器端获取数据都采用异步(当然也可以使用同步)
  xml:可扩展标记语言,我们一般都会在一个XML文件中,自己扩展一些有特殊含义的标签,通过标签的结构来存储一些数据;一般项目中服务器端返回给客户端的数据都是JSON格式的字符串,但是有一些时候服务器端也会给客户端返回XML格式的字符串

  AJAX是一门技术,我们在客户端的浏览器中,可以通过AJAX技术向服务器端发送一个请求(根据URL地址发送请求),服务器端根据请求把数据返回,我们使用AJAX中提供的方法或者属性可以获取到服务器端返回的内容




->Request Method (HTTP请求的方式:客户端发送请求的时候设置)
  不管用哪一种请求方式,客户端除了发送请求以外也可以给服务器端传递数据,服务器端也可以给客户端返回数据

  GET  获取,给服务器的少,从服务器拿取的多
  POST 推送,给服务器的多,从服务器获取的少
  PUT  增加,在服务器上增加一些资源文件
  DELETE 删除,在服务器上删除某一个资源文件
  HEAD 头部,只获取服务器的响应头信息,响应主体内容不获取
  ...

  GET PK POST
  GET请求传递给服务器数据一般都是通过URL地址栏问号传参的方式传递给服务器的
  POST请求传递给服务器数据一般都是把传递的数据放在请求主体中传递给服务器的

  [大小限制]
    ->GET请求,传递给服务器端的内容存在大小的限制
        因为GET请求传递给服务器的内容都是在URL后面拼接的,如果传递给服务器的内容多,URL就会变的很长,每一个浏览器对于URL的长度都会存在大小的限制(谷歌8KB 火狐7KB IE2KB),超过长度限制的部分会被浏览器截掉
    ->POST请求传递给服务器的数据是放在请求主体中的,理论上传递多少内容都可以,没有大小的限制,但是实际工作中,我们一般都会给其做限制,因为如果传递的内容过多,AJAX整体的请求时间会变的很长(一般都在2MB以内最好)

  [缓存问题]
    ->GET请求经常会出现浏览器和服务器之间做一些默认的缓存(这个缓存不是我们所谓的304,304是我们用有特殊的技术去实现出来的,这里的缓存只是浏览器自己的默认一些机制,我们工作中是不需要这个缓存的)
    ->POST请求浏览器不会默认为其设置缓存

    如果想要清除浏览器默认的缓存,我们需要在URL的末尾追加一个随机数
    xhr.open("get", "/qianduan/temp.txt?name=zhufeng&_="+Math.random(), true);

  [安全问题]
    ->由于GET传递给服务器的内容都在URL上,这样话,只要别人把URL劫持了,就可以拦截到你传递给服务器的数据,这样信息就不安全了
    ->POST请求是放在请求主体中的,主体中内容是很难被劫持的


->ASYNC
  xhr.open([HTTP METHOD],[URL],[sync/async]);
  AJAX默认是异步请求的,也就是第三个参数默认是TRUE,如果想使用同步请求,把第三个参数改写为FALSE

->AJAX的状态
  xhr.readyState
  0 UNSENT 请求还没有发送(AJAX对象刚刚创建完成)
  1 OPENED 已经把XHR.OPEN执行完成了
  2 HEADERS_RECEIVED 响应头信息已经接收,但是主体的内容还没有响应回来
  3 LOADING 响应主体的内容正在处理加载
  4 DONE 响应主体内容已经获取成功

->Status Code (HTTP响应状态码:服务器端响应内容的时候设置)
  xhr.status
  200 OK 正常发送也正常返回,中间没有任何的特殊操作(以2开头的状态码都可以算作成功)

  301 永久重定向(永久转移)
      例如:我们访问http://www.360buy.com/都会重新定向到http://www.jd.com/这个就是永久重定向
  302 临时重定向(临时转移)
      例如:服务器的负载均衡,对于很多大公司的项目,网站中的资源图片很多都是采用的302做的临时转移,以此解决主服务器的压力
  304 读取的是缓存数据
      例如:对于不经常更新的JS/CSS/IMG等,第一次请求完成后我们做一个缓存,以后在请求我们直接读取缓存中的内容,这个技巧也是前端开发中常规的优化手段

  401 传递给服务器的参数出现错误
  403 无权限访问
  404 找不到,请求的URL地址是错误的

  500 未知的服务器错误,服务器可能宕机了也可能是其它的原因,总之是服务器的错误
  503 服务器压力过大,比如一台服务器只能同时处理1000个访问,那么从第1001个开始都是503,一般遇到503多刷新几次可能就好了
  ...